plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'org.springframework.boot' version '2.0.4.RELEASE' apply false
    id 'org.liquibase.gradle' version '2.0.1' apply false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'http://maven-repo.electrica.io'
        }
    }

    group = 'io.electrica.services'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    ext {
        // Plugins
        snakeyamlVersion = '1.15'

        // Spring
        securityOauth2AutoconfigureVersion = '2.0.4.RELEASE'
        springCloudVersion = 'Finchley.SR2'

        // Other
        electricaConnectorVersion = '0.0.1-SNAPSHOT'
        electricaSdkJava8VersionBom = '0.0.1-SNAPSHOT'
        
        postgresqlDriverVersion = '42.2.5'
        javaxInjectVersion = '1'
        dozerVersion = '6.4.1'
        guavaVersion = '26.0-jre'
        apacheCommonLang3Version = '3.8.1'
        findbugsAnnotationsVersion = '3.0.1'
        findbugsJsr305Version = '3.0.2'
        logstashLogbackEncoderVersion = '5.2'
        commonsioVersion = '1.3.2'
        lombokVersion = '1.18.4'
        springfoxSwaggerVersion = '2.9.2'
        jacksonJsr310Version = '2.9.7'
        testngVersion = '6.10'
        okhttpVersion = '3.11.0'
        junit5Version = '5.3.2'
        autoService = '1.0-rc4'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "org.junit:junit-bom:$junit5Version"
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"            
            mavenBom "io.electrica.sdk.java8:electrica-sdk-java8-dependencies:$electricaSdkJava8VersionBom"
        }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"

        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            resources {
                srcDir 'src/main/resources'
            }
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }
    
    // Checkstyle settings
    checkstyle {
        toolVersion '7.8.1'
        configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
    }
    checkstyleMain {
        source ='src/main/java'
    }
    checkstyleTest {
        source = 'src/test/java'
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }

    // Findbugs  settings
    findbugs {
        ignoreFailures = false
        toolVersion = '3.0.1'
        sourceSets=[sourceSets.main]
        excludeFilter = file("${rootDir}/config/findbugs/excludeFilter.xml")
        reportsDir = file("${buildDir}/reports/findbugs")
        effort = 'max'
    }
    tasks.withType(FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }
}

def projects = subprojects

task jacocoMerge(type: JacocoMerge) {
    projects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn projects.test, jacocoMerge

    additionalSourceDirs = files(projects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(projects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(projects.sourceSets.main.output)
     afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'io/electrica/migration/*')
        })//this task is excluding the  migration classes
    }
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = projects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
}
